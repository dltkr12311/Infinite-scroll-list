{"version":3,"sources":["styles/reset.js","components/CommentListItem.js","services/utils/commentAPI.js","components/CommentList.js","hooks/useInfiniteScroll.js","pages/Comments/Comments.js","App.js","index.js"],"names":["reset","css","CommentListItem","comment","console","log","id","email","body","ItemWraper","Item","lineBreak","styled","li","p","getComments","a","page","axios","get","response","data","error","CommentList","currentPage","useRef","targetRef","useState","comments","setComments","loading","setLoading","hasMore","setHasMore","loadComment","useCallback","newComments","prev","Set","length","loadMoreComments","current","useEffect","target","onIntersect","observer","IntersectionObserver","observe","disconnect","useInfiniteScroll","isIntersecting","LoadingBar","ListWrapper","map","ref","ul","Comments","App","styles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAoBeA,EAlBDC,YAAH,0N,sDCsBIC,EArBS,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACzBC,QAAQC,IAAIF,EAAQG,GAAI,WACxB,IAAQA,EAAoBH,EAApBG,GAAIC,EAAgBJ,EAAhBI,MAAOC,EAASL,EAATK,KACnB,OACE,eAACC,EAAD,WACE,eAACC,EAAD,WACE,4CACA,+BAAOJ,OAET,eAACI,EAAD,WACE,uCACA,+BAAOH,OAET,eAACG,EAAD,CAAMC,WAAS,EAAf,UACE,yCACA,+BAAOH,WAQTC,EAAaG,IAAOC,GAAV,gNAeVH,EAAOE,IAAOE,EAAV,qJAQK,qBAAGH,WAA6B,W,iBCpChCI,EAXE,uCAAG,0CAAAC,EAAA,6DAAOC,EAAP,+BAAc,EAAd,kBAEOC,IAAMC,IAAN,8DACkCF,EADlC,eAFP,cAEVG,EAFU,yBAKTA,EAASC,MALA,gCAOhBjB,QAAQkB,MAAR,MAPgB,yDAAH,qDCyEFC,EAlEK,WAClB,IAAMC,EAAcC,iBAAO,GAErBC,EAAYD,iBAAO,MAEzB,EAAgCE,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAcC,sBAAW,sBAAC,4CAAAnB,EAAA,8FAAkB,GAATC,EAAT,EAASA,KAAT,SAE5Bc,GAAW,GAFiB,SAGFhB,EAAYE,GAHV,cAGtBmB,EAHsB,OAI5BP,GAAY,SAACQ,GAAD,mBAAc,IAAIC,IAAJ,sBAAYD,GAAZ,YAAqBD,SAC/CH,EAAWG,EAAYG,OAAS,GAChCR,GAAW,GANiB,kBAOrBK,GAPqB,kCAS5BhC,QAAQC,IAAR,MAT4B,yBAW5B0B,GAAW,GAXiB,6EAa7B,IAEGS,EAAmBL,sBAAW,sBAAC,sBAAAnB,EAAA,sDAC/BY,EAASW,OAAS,GACpBnC,QAAQC,IAAIuB,EAASW,QACrBf,EAAYiB,UACZP,EAAY,CACVjB,KAAMO,EAAYiB,WAEVb,EAASW,UACnBR,GAAW,GARsB,2CAUlC,CAACH,EAAUM,IAed,OAbAQ,qBAAU,WACRR,MACC,IC7C4B,SAAC,GAA6B,IAA3BS,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAC1CF,qBAAU,WACR,IAAMG,EAAW,IAAIC,qBAAqBF,GAC1C,GAAKD,EAML,OAFAE,EAASE,QAAQJ,GAEV,WACG,OAARE,QAAQ,IAARA,KAAUG,gBAEX,CAACL,EAAQC,IDmCZK,CAAkB,CAChBN,OAAQjB,EAAUe,QAClBG,YAAa,YAA0B,oBAAtBM,iBACQpB,GAAWE,GAChCQ,OAMJ,qCACGV,GACC,cAACqB,EAAD,UACE,2DAGJ,eAACC,EAAD,WACGxB,EAASyB,KAAI,SAAClD,GAAD,OACZ,cAAC,EAAD,CAAkCA,QAASA,GAArBA,EAAQG,OAEhC,qBAAKgD,IAAK5B,WAQZ0B,EAAcxC,IAAO2C,GAAV,mEAKXJ,EAAavC,IAAOE,EAAV,uZExED0C,EARE,WACf,OACE,mCACE,cAAC,EAAD,OCSSC,MATf,WACE,OACE,qCACE,cAAC,IAAD,CAAQC,OAAQ1D,IAChB,cAAC,EAAD,QCJN2D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e2983f7b.chunk.js","sourcesContent":["import { css } from \"@emotion/react\";\n\nconst reset = css`\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n  }\n  em {\n    font-style: normal;\n  }\n  li {\n    list-style: none;\n  }\n\n  body {\n    touch-action: none;\n  }\n`;\n\nexport default reset;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst CommentListItem = ({ comment }) => {\n  console.log(comment.id, \"comment\");\n  const { id, email, body } = comment;\n  return (\n    <ItemWraper>\n      <Item>\n        <em>Comment Id</em>\n        <span>{id}</span>\n      </Item>\n      <Item>\n        <em>Email</em>\n        <span>{email}</span>\n      </Item>\n      <Item lineBreak>\n        <em>Comment</em>\n        <span>{body}</span>\n      </Item>\n    </ItemWraper>\n  );\n};\n\nexport default CommentListItem;\n\nconst ItemWraper = styled.li`\n  padding: 20px;\n  background: #f8f9fa;\n  border: 0.5px solid #ced4da;\n  border-radius: 20px;\n\n  & + & {\n    margin-top: 14px;\n  }\n\n  p + p {\n    margin-top: 12px;\n  }\n`;\n\nconst Item = styled.p`\n  & > * {\n    font-size: 18px;\n  }\n\n  em {\n    margin-right: 12px;\n    font-weight: bold;\n    display: ${({ lineBreak }) => lineBreak && \"block\"};\n  }\n`;\n","import axios from \"axios\";\n\nconst getComments = async (page = 1) => {\n  try {\n    const response = await axios.get(\n      `https://jsonplaceholder.typicode.com/comments?_page=${page}&_limit=10`\n    );\n    return response.data;\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nexport default getComments;\n","import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport CommentListItem from \"./CommentListItem\";\n\nimport getComments from \"services/utils/commentAPI\";\n\nimport { useInfiniteScroll } from \"hooks/useInfiniteScroll\";\n\nconst CommentList = () => {\n  const currentPage = useRef(1);\n\n  const targetRef = useRef(null);\n\n  const [comments, setComments] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(false);\n\n  const loadComment = useCallback(async ({ page } = {}) => {\n    try {\n      setLoading(true);\n      const newComments = await getComments(page);\n      setComments((prev) => [...new Set([...prev, ...newComments])]);\n      setHasMore(newComments.length > 0);\n      setLoading(false);\n      return newComments;\n    } catch (e) {\n      console.log(e);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const loadMoreComments = useCallback(async () => {\n    if (comments.length > 0) {\n      console.log(comments.length);\n      currentPage.current++;\n      loadComment({\n        page: currentPage.current,\n      });\n    } else if (!comments.length++) {\n      setLoading(false);\n    }\n  }, [comments, loadComment]);\n\n  useEffect(() => {\n    loadComment();\n  }, []);\n\n  useInfiniteScroll({\n    target: targetRef.current,\n    onIntersect: ([{ isIntersecting }]) => {\n      if (isIntersecting && !loading && hasMore) {\n        loadMoreComments();\n      }\n    },\n  });\n\n  return (\n    <>\n      {loading && (\n        <LoadingBar>\n          <span>로딩중...</span>\n        </LoadingBar>\n      )}\n      <ListWrapper>\n        {comments.map((comment) => (\n          <CommentListItem key={comment.id} comment={comment} />\n        ))}\n        <div ref={targetRef} />\n      </ListWrapper>\n    </>\n  );\n};\n\nexport default CommentList;\n\nconst ListWrapper = styled.ul`\n  margin: 33px auto;\n  width: 500px;\n`;\n\nconst LoadingBar = styled.p`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.3);\n  span {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 200px;\n    height: 200px;\n    padding: 50px;\n    background: #fff;\n    border-radius: 50%;\n  }\n`;\n","import { useEffect } from \"react\";\n\nexport const useInfiniteScroll = ({ target, onIntersect }) => {\n  useEffect(() => {\n    const observer = new IntersectionObserver(onIntersect);\n    if (!target) {\n      return;\n    }\n\n    observer.observe(target);\n\n    return () => {\n      observer?.disconnect();\n    };\n  }, [target, onIntersect]);\n};\n","import React from \"react\";\nimport CommentList from \"components/CommentList\";\nconst Comments = () => {\n  return (\n    <>\n      <CommentList />\n    </>\n  );\n};\n\nexport default Comments;\n","import { Global } from \"@emotion/react\";\n\nimport reset from \"./styles/reset\";\nimport Comments from \"pages/Comments/Comments\";\n\nfunction App() {\n  return (\n    <>\n      <Global styles={reset} />\n      <Comments />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}